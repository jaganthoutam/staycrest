apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
data:
  jaeger-config.yaml: |
    apiVersion: jaegertracing.io/v1
    kind: Jaeger
    metadata:
      name: staycrest-jaeger
    spec:
      strategy: production
      storage:
        type: elasticsearch
        options:
          es:
            server-urls: http://elasticsearch:9200
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
    processors:
      batch:
        timeout: 1s
      memory_limiter:
        check_interval: 1s
        limit_mib: 512
    exporters:
      jaeger:
        endpoint: staycrest-jaeger-collector:14250
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [jaeger]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [prometheus]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  labels:
    app: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:latest
        args:
        - "--config=/conf/otel-collector-config.yaml"
        ports:
        - containerPort: 4317 # OTLP gRPC
          name: otlp-grpc
        - containerPort: 4318 # OTLP HTTP
          name: otlp-http
        - containerPort: 8889 # Prometheus metrics
          name: metrics
        volumeMounts:
        - name: otel-collector-config-volume
          mountPath: /conf
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 400Mi
      volumes:
      - name: otel-collector-config-volume
        configMap:
          name: otel-collector-config
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
  - name: otlp-grpc
    port: 4317
    targetPort: 4317
  - name: otlp-http
    port: 4318
    targetPort: 4318
  - name: metrics
    port: 8889
    targetPort: 8889
---
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: staycrest-jaeger
spec:
  strategy: production
  storage:
    type: elasticsearch
    options:
      es:
        server-urls: http://elasticsearch:9200
    esIndexCleaner:
      enabled: true
      numberOfDays: 7
      schedule: "55 23 * * *"
  ingress:
    enabled: true
    hosts:
    - jaeger.staycrest.example.com
  ui:
    options:
      menu:
      - label: StayCrest
        url: https://staycrest.example.com
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ""
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: staycrest-service-monitor
  labels:
    app: staycrest
spec:
  selector:
    matchLabels:
      app: staycrest
  endpoints:
  - port: metrics
    interval: 15s
    path: /metrics
  - port: http
    interval: 15s
    path: /api/metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-dashboard-loader
  labels:
    app: grafana-loader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana-loader
  template:
    metadata:
      labels:
        app: grafana-loader
    spec:
      containers:
      - name: grafana-loader
        image: curlimages/curl:latest
        command:
        - "/bin/sh"
        - "-c"
        - |
          cd /dashboards
          while true; do
            for dashboard in *.json; do
              if [ -f "$dashboard" ]; then
                echo "Importing dashboard: $dashboard"
                curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${GRAFANA_API_KEY}" "http://grafana:3000/api/dashboards/db" --data-binary @$dashboard
              fi
            done
            sleep 3600
          done
        env:
        - name: GRAFANA_API_KEY
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: api-key
        volumeMounts:
        - name: dashboard-volume
          mountPath: /dashboards
      volumes:
      - name: dashboard-volume
        configMap:
          name: grafana-dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
data:
  node-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Node.js Application Performance",
        "panels": [
          {
            "title": "CPU Usage",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "title": "Memory Usage",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "title": "HTTP Request Rate",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Response Time",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }
  service-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Service Level Objectives",
        "panels": [
          {
            "title": "API Success Rate",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 0}
          },
          {
            "title": "API Error Rate",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 0}
          },
          {
            "title": "API Latency",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 0}
          }
        ]
      }
    }
  search-sources-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Search Sources Service",
        "panels": [
          {
            "title": "Enabled Loyalty Programs",
            "type": "stat",
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "title": "Web Search Providers",
            "type": "stat",
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "title": "Hotel Aggregators",
            "type": "stat",
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "title": "Direct Booking Platforms",
            "type": "stat",
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "title": "Search API Response Time",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Search Queries per Minute",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "title": "Cache Hit Ratio",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 16}
          },
          {
            "title": "Search Success Rate",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 16}
          },
          {
            "title": "Search Errors",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16}
          }
        ]
      }
    }
  db-cache-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Database Cache Performance",
        "panels": [
          {
            "title": "Redis Cache Memory Usage",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 0}
          },
          {
            "title": "Redis Cache Hit Ratio",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 0}
          },
          {
            "title": "Redis Cache Operations",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 0}
          },
          {
            "title": "MongoDB Cache Size",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 8}
          },
          {
            "title": "MongoDB Query Cache Hit Ratio",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 8}
          },
          {
            "title": "MongoDB Average Query Time",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 8}
          },
          {
            "title": "PgBouncer Active Connections",
            "type": "gauge",
            "gridPos": {"h": 8, "w": 8, "x": 0, "y": 16}
          },
          {
            "title": "Postgres Query Cache Hit Ratio",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 8, "y": 16}
          },
          {
            "title": "Postgres Average Query Time",
            "type": "graph",
            "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16}
          },
          {
            "title": "Cache Evictions Rate",
            "type": "graph",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 24}
          },
          {
            "title": "Cache Circuit Breaker Status",
            "type": "stat",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 24}
          }
        ]
      }
    } 